#include <SPI.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SH1106.h>
#include <Adafruit_BMP085.h>

#define OLED_RESET 4
Adafruit_SH1106 display(OLED_RESET);

Adafruit_BMP085 bmp;
#define SEALEVELPRESSURE_HPA (101500)
/*Pin initialize*/
//Motor
int motor1pin1 = 2;
int motor1pin2 = 3;
int ENA = 9; //pwm, motor 1 speed
int motor2pin1 = 4;
int motor2pin2 = 5;
int ENB = 10; //pwm, motor 2 speed
int motorSpeed0 = 00;
int motorSpeed1 = 10;
int motorSpeed2 = 20;
int motorSpeed3 = 30;
int motorSpeed4 = 40;
int motorSpeed5 = 50;
int motorSpeed6 = 60;
//BitMap Position
int xx = 0;
int yy = 0;
//Ultrasonic
const int echoPin = 6; // Echo Pin of Ultrasonic Sensor
const int trigPin = 7; // Trigger Pin of Ultrasonic Sensor
/*Pin initialize*/
float simpweadiff, curpressure, pweather, curalt, temp;
/*BitMap Image*/
const unsigned char PROGMEM autobreak [] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xD8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x8C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x8C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x8E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x8F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x8F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x8F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x8F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x9F, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x8F, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0x8F, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFF, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFF, 0xE0, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xFE, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xF0, 0x3F, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x03, 0xFE, 0x10, 0x07, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x00, 0x00, 0x1F, 0xF0, 0x18, 0x03, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x38, 0x00, 0x3F, 0x60, 0x18, 0x01, 0xFF, 0xC0, 0x00, 0x00, 0x0F, 0xFF, 0xFF, 0xFC, 0x00, 0xE0, 0x38, 0x00, 0x7E, 0x60, 0x18, 0x1F, 0xFF, 0xC0, 0x00, 0x00, 0x3F, 0xFF, 0xFF, 0xFE, 0x00, 0xE0, 0x78, 0x00, 0x7C, 0x60, 0x0C, 0xFF, 0xFF, 0xC0, 0x00, 0x00, 0x7F, 0xFF, 0xFF, 0xFF, 0x00, 0xF0, 0x78, 0x00, 0xF8, 0x20, 0x0F, 0xFF, 0xFF, 0xE0, 0x00, 0x00, 0xFC, 0xC0, 0x30, 0xFF, 0x00, 0x70, 0x70, 0x00, 0xF0, 0x30, 0x7F, 0xFF, 0xFF, 0xE0, 0x00, 0x01, 0xF8, 0xC0, 0x30, 0x7F, 0x00, 0x70, 0xF0, 0x01, 0xF0, 0x13, 0xFF, 0xFC, 0x1F, 0xE0, 0x00, 0x03, 0xE0, 0xC0, 0x30, 0x1F, 0x80, 0x30, 0xE0, 0x01, 0xE0, 0x3F, 0xFF, 0xF0, 0x07, 0xF0, 0x00, 0x07, 0xC0, 0xC0, 0x30, 0x0F, 0x80, 0x30, 0xC0, 0x03, 0xC1, 0xFF, 0xFF, 0xE3, 0xC7, 0xE0, 0x00, 0x0F, 0x00, 0xC0, 0x30, 0x07, 0xC0, 0x19, 0xC0, 0x03, 0x8F, 0xFF, 0xFF, 0xC7, 0xF3, 0xE0, 0x00, 0xFE, 0x00, 0xC0, 0x30, 0x03, 0xF8, 0x19, 0x80, 0x0F, 0xFF, 0xFF, 0xFF, 0xCC, 0x10, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x19, 0x00, 0x3F, 0xFF, 0xFF, 0xFF, 0xC8, 0x18, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x83, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x98, 0x08, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x8A, 0x03, 0xFF, 0xFF, 0xFF, 0xFF, 0x98, 0x08, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x84, 0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0x98, 0x08, 0x00, 0x00, 0x3F, 0xFF, 0xFF, 0xFF, 0xF3, 0xFF, 0x80, 0x1F, 0xFF, 0xFF, 0xFF, 0xFC, 0x0C, 0x18, 0x00, 0x00, 0x07, 0xFF, 0xFF, 0xFF, 0x80, 0xFF, 0x80, 0x3F, 0xE0, 0x7F, 0xFF, 0xC0, 0x06, 0x70, 0x00, 0x00, 0xC3, 0xFF, 0xFF, 0xFF, 0x1C, 0x3F, 0x80, 0x7F, 0xC0, 0x1F, 0xFE, 0x00, 0x03, 0xE0, 0x00, 0x00, 0xF1, 0xFF, 0xFF, 0xFE, 0x7F, 0x3F, 0x80, 0x7F, 0x9F, 0x1F, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0xFF, 0xFF, 0xFE, 0x63, 0x9F, 0x80, 0x7F, 0x1D, 0x8F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0xFF, 0xFF, 0xFC, 0xC1, 0x9F, 0x88, 0x7F, 0x30, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0xFF, 0xFF, 0xFC, 0x80, 0x9F, 0x18, 0x7F, 0x20, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x01, 0x80, 0xC0, 0x1C, 0x3E, 0x60, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x80, 0xC0, 0x26, 0x3E, 0x40, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0xC0, 0x80, 0x46, 0x3E, 0x60, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0xE3, 0x80, 0x44, 0x00, 0x30, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x1F, 0xFF, 0xF0, 0x00, 0x00, 0x00, 0x7F, 0x00, 0x80, 0x00, 0x3D, 0xC0, 0x00, 0x00, 0x01, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x1F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xD5, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x9F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xFF, 0xFF, 0xFF, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x55, 0xFA, 0x95, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
/*BitMap Image*/


void setup() {
 //Display Control
  display.begin(SH1106_SWITCHCAPVCC, 0x3C);
 //BMP Control
  if (!bmp.begin()) {
      Serial.println("Could not find a valid BMP085 sensor, check wiring!");
      while (1) {}
    }
 //Motor Control
  pinMode(motor1pin1, OUTPUT);
  pinMode(motor1pin2, OUTPUT);
  pinMode(ENA, OUTPUT);
  pinMode(motor2pin1, OUTPUT);
  pinMode(motor2pin2, OUTPUT);
  pinMode(ENB, OUTPUT);
 //Ultrasonic Control
  Serial.begin(9600); // Starting Serial Communication
  pinMode(trigPin, OUTPUT); // initialising pin 7 as output
  pinMode(echoPin, INPUT); // initialising pin 6 as input
}



void loop() {
  //Ultrasonic
   long duration, cm;
 digitalWrite(trigPin, LOW);
 delayMicroseconds(2);
 digitalWrite(trigPin, HIGH);
 delayMicroseconds(10);
 digitalWrite(trigPin, LOW);
 duration = pulseIn(echoPin, HIGH); // using pulsin function to determine total time
 cm = microsecondsToCentimeters(duration); // calling method

   
  // Display
  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(WHITE);
    
  display.setCursor(0,0);
  display.print("=====SMART TRUCK=====");
  
  display.setCursor(0,15);
  display.print("T=");
  temp=bmp.readTemperature();
  display.print(temp);
  display.println("*C ");
  
  /*Fan control by temperature*/
  
  display.setCursor(0,42);
  if(temp<=27)
   {
    display.print("Cooling Fan OFF");
    digitalWrite(motor1pin1, LOW);
    digitalWrite(motor1pin2, LOW);
    analogWrite(ENA,motorSpeed0);
     display.setCursor(0,55);
     display.print("> Wind Level 0%");
   }
  if((temp>27)&&(temp<=28))
    {
     display.print("Cooling Fan ON");
     digitalWrite(motor1pin1, HIGH);
     digitalWrite(motor1pin2, LOW);
     analogWrite(ENA,motorSpeed2);
     display.setCursor(0,55);
     display.print("> Wind Level 20%");
    }
  if((temp>28)&&(temp<=29))
    {
     display.print("Cooling Fan ON");
     digitalWrite(motor1pin1, HIGH);
     digitalWrite(motor1pin2, LOW);
     analogWrite(ENA,motorSpeed3);
     display.setCursor(0,55);
     display.print("> Wind Level 40%");
    }
  if(temp>29)
    {
     display.print("Cooling Fan ON");
     digitalWrite(motor1pin1, HIGH);
     digitalWrite(motor1pin2, LOW);
     analogWrite(ENA,motorSpeed4);
     display.setCursor(0,55);
     display.print("> Wind Level 60%");
    }

  /*prints BME180 pressure in Hectopascal Pressure Unit*/
  /*display.setCursor(0,20);
  display.print("P=");
  display.print(bmp.readPressure()/100.0F,1);
  display.println("hPa"); */
 
  
    /*prints BME180 altitude in meeters*/
  display.setCursor(60,15);
  display.print("| A=");
  display.print(bmp.readAltitude(SEALEVELPRESSURE_HPA),1);
  display.println("m");
  delay(100);
 
 curpressure=bmp.readPressure()/100.0;
 pweather=(101.3*exp(((float)(curalt))/(-7900)));
 simpweadiff=curpressure-pweather;
 display.setCursor(0,28);
 display.print("It's a ");
 if (simpweadiff>0.25)
   display.print("SUNNY");

   if (simpweadiff<=0.25)
   display.print("CLOUDY");
   
  if (simpweadiff<-0.25)
   display.print("RAINY");
   display.println(" Day");
//delay(2000);
//Emergency Auto Break
      digitalWrite(motor2pin1, HIGH);
      digitalWrite(motor2pin2, LOW);
      analogWrite(ENB,motorSpeed6);
  if(cm<30)
     { 
      display.clearDisplay();
      display.setTextSize(1);
      display.setTextColor(WHITE);

      digitalWrite(motor2pin1, LOW);
      digitalWrite(motor2pin2, LOW);
      analogWrite(ENB,motorSpeed0);
      
      display.setCursor(0,10);
      display.print("EMERGENCY     BREAK");
      display.drawBitmap(xx, yy,autobreak,128,64, 1);
      display.display();
      delay(500);
     }
     
   
   display.display();
}

long microsecondsToCentimeters(long microseconds) // method to covert microsec to cm
{
 return microseconds / 29 / 2;
} 
